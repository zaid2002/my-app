{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or not \n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#05203c\"; //#383b3e\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - DarkMode\"\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - LightMode\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"TextUtils\",\n      aboutText: \"About Us\",\n      mode: mode,\n      toggleMode: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        showAlert: showAlert,\n        heading: \"Enter the text\",\n        mode: mode,\n        toggleMode: toggleMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"3PANcZUkwn4FInWWHvNniS2W3SU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","About","Navbar","TextForm","Alert","BrowserRouter","Router","Routes","Route","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","alert","setAlert","showAlert","message","type","msg","setTimeout","mode","setMode","toggleMode","document","body","style","backgroundColor","children","title","aboutText","fileName","_jsxFileName","lineNumber","columnNumber","className","heading","_c","$RefreshReg$"],"sources":["E:/React/my-app/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport { \n  BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or not \n  const toggleMode = ()=>{\n    if(mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor = \"#05203c\" //#383b3e\n      showAlert(\"Dark Mode has been enabled\",\"success\")\n      // document.title = \"TextUtils - DarkMode\"\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"Light Mode has been enabled\",\"success\")\n      // document.title = \"TextUtils - LightMode\"\n    }\n  }\n  return (\n    <>\n      <Navbar title = \"TextUtils\" aboutText = \"About Us\" mode = {mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/> \n\n      <div className=\"container my-3\">\n        {/* <About/> */}\n        <TextForm showAlert = {showAlert} heading = \"Enter the text\" mode = {mode} toggleMode={toggleMode}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,SACEC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMiB,SAAS,GAAGA,CAACC,OAAO,EAACC,IAAI,KAAG;IAChCH,QAAQ,CAAC;MACPI,GAAG,EAAGF,OAAO;MACbC,IAAI,EAAGA;IACT,CAAC,CAAC;IACFE,UAAU,CAAC,MAAM;MACfL,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EACD,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EAC3C,MAAMwB,UAAU,GAAGA,CAAA,KAAI;IACrB,IAAGF,IAAI,KAAG,OAAO,EAAC;MAChBC,OAAO,CAAC,MAAM,CAAC;MACfE,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,SAAS,EAAC;MAChDX,SAAS,CAAC,4BAA4B,EAAC,SAAS,CAAC;MACjD;IACF,CAAC,MACG;MACFM,OAAO,CAAC,OAAO,CAAC;MAChBE,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,OAAO;MAC7CX,SAAS,CAAC,6BAA6B,EAAC,SAAS,CAAC;MAClD;IACF;EACF,CAAC;EACD,oBACEP,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA,CAACR,MAAM;MAAC4B,KAAK,EAAG,WAAW;MAACC,SAAS,EAAG,UAAU;MAACT,IAAI,EAAIA,IAAK;MAACE,UAAU,EAAEA;IAAW;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3FzB,OAAA,CAACN,KAAK;MAACW,KAAK,EAAEA;IAAM;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAEtBzB,OAAA;MAAK0B,SAAS,EAAC,gBAAgB;MAAAP,QAAA,eAE7BnB,OAAA,CAACP,QAAQ;QAACc,SAAS,EAAIA,SAAU;QAACoB,OAAO,EAAG,gBAAgB;QAACf,IAAI,EAAIA,IAAK;QAACE,UAAU,EAAEA;MAAW;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjG,CAAC;EAAA,eACN,CAAC;AAEP;AAACrB,EAAA,CAtCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}